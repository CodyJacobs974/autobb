import os
from rich.console import Console
from rich.prompt import Prompt
from .utils import read_config # Import from utils

console = Console()

# Helper function to read config (can be refactored to utils.py)
# def read_config_from_exploitation(target_base_path: str) -> dict: # Removed
#     config_path = os.path.join(target_base_path, "config.txt")
#     config = {}
#     try:
#         with open(config_path, "r") as f:
#             for line in f:
#                 if "=" in line:
#                     key, value = line.strip().split("=", 1)
#                     config[key.strip()] = value.strip()
#     except FileNotFoundError:
#         console.print(f"[red]Error: Configuration file not found at {config_path}[/red]")
#         return None
#     except Exception as e:
#         console.print(f"[red]Error reading configuration file: {e}[/red]")
#         return None
#     return config

# Placeholder functions for exploitation tasks
def build_poc(target_base_path: str):
    console.print("\n[cyan]Building Proof of Concepts (PoCs) (Not implemented yet).[/cyan]")
    config = read_config(target_base_path)
    if config and "TARGET_IDENTIFIER" in config:
        console.print(f"Target: {config['TARGET_IDENTIFIER']}")
    console.print("This section would guide or assist in creating simple PoCs for discovered vulnerabilities (e.g., XSS payload, IDOR URL, SSRF request).")
    console.print("Payloads used and responses should be saved in target_folder/exploitation/.")

def use_exploitation_tools(target_base_path: str):
    console.print("\n[cyan]Using Exploitation Tools (curl, httpie, Burp Repeater) (Not implemented yet).[/cyan]")
    config = read_config(target_base_path)
    if config and "TARGET_IDENTIFIER" in config:
        console.print(f"Target: {config['TARGET_IDENTIFIER']}")
    console.print("Guidance on using command-line tools like curl/httpie or features of Burp Suite for manual exploitation.")

def search_exploit_db(target_base_path: str):
    console.print("\n[cyan]Searching Exploit-DB (searchsploit) (Not implemented yet).[/cyan]")
    config = read_config(target_base_path)
    if config and "TARGET_IDENTIFIER" in config:
        console.print(f"Target: {config['TARGET_IDENTIFIER']}")
    console.print("This would integrate or guide the use of 'searchsploit' to find known CVEs based on discovered technologies or vulnerabilities.")

def manage_screenshots_exploitation(target_base_path: str):
    console.print("\n[cyan]Managing Screenshots for Exploitation (Not implemented yet).[/cyan]")
    screenshots_path = os.path.join(target_base_path, "screenshots")
    console.print(f"Remind user to save relevant screenshots of exploitation attempts/successes to: {screenshots_path}")


def exploitation_menu(target_base_path: str):
    """Displays the exploitation menu and handles user choice."""
    while True:
        console.print("\n[bold red]--- Exploitation Menu ---[/bold red]")
        exploitation_options = {
            "1": "Build/Craft Proof of Concept (PoC)",
            "2": "Use Exploitation Tools (curl, httpie, etc.)",
            "3": "Search Exploit-DB (searchsploit)",
            "4": "Manage Screenshots Guidance",
            "5": "Back to Main Menu"
        }
        for key, value in exploitation_options.items():
            console.print(f"[magenta][{key}][/magenta] {value}")

        choice = Prompt.ask("Select an exploitation task", choices=list(exploitation_options.keys()), default="5")

        if choice == "1":
            build_poc(target_base_path)
        elif choice == "2":
            use_exploitation_tools(target_base_path)
        elif choice == "3":
            search_exploit_db(target_base_path)
        elif choice == "4":
            manage_screenshots_exploitation(target_base_path)
        elif choice == "5":
            break
        else:
            console.print("[red]Invalid option.[/red]")
